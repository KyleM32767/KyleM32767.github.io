---
title: "Wii Remote ELRS Control Scheme for Combat Robots"
date: "2024-10-26"
categories: [Hobby Projects]
image: "20240823_002548.jpg"
description: Why don't you use a Wii Remote for your robot?
---

Combat robots, particularly the smaller weight classes, are powered by hobby RC electronics - stuff used for RC planes, drones, cars, etc. To control their robots, they typically use something like [this](https://www.frsky-rc.com/product/taranis-q-x7-2/), or [this](https://radiomasterrc.com/products/zorro-radio-controller?variant=46486367371456), or even [this](https://radiomasterrc.com/products/mt12-surface-radio-controller?variant=48008718057703), at least I think. I am not familiar with these sorts of things, because I took a different approach: the glorious Wii Remote! Why? I'm glad you asked!

* It's funny
* As a certified Nintendo kid (I even had a Wii U back in the day!) the controller is very familiar
* Stop asking questions - my robot is literally called "Who Cares?"

## Do you use motion controls?

{{< video 20240414_214331.mp4 >}}

Absolutely! The controls are...

* drive normal: hold Z + nunchuk stick
* drive inverted: hold C + nunchuk stick
* weapon: hold A+B + tilt Wii Remote up and down

All controls have a [dead man's switch](https://en.wikipedia.org/wiki/Dead_man%27s_switch) so I don't do anything weird by putting down the controller.

## The old and bad approach - Bluetooth to ESP32

The Wii Remote connects a Wii console via Bluetooth. (sidenote: as an older gen Z who witnessed the transition to Bluetooth headphones and [the death of the headphone jack](https://www.bbc.com/news/technology-37303181), I had no idea Bluetooth has been around that long) The immediately obvious idea is to stick an ESP32 inside the robot and use it as my receiver, and it's what I did at first for [my plastic antweight](../plant/index.qmd).

This approach works fine until it doesn't, as the ESP32 dev boards are somewhat sensitive to the noise that comes from the back EMF of motors, the voltage sags from dishing out hits, and any shenanigans that happen when the robot gets hit. Eventually this came to a point where the connection would cut out after making a big hit, and upon reconnection I would lost drive. (But hey, at least the failsafe worked, and the drive and weapon stopped when this happened!) I suspected this was a voltage sag issue until a commenter on my YouTube video shared a similar story...

![](comment.png){fig-alt="from \@Anguriel1986, Great video!  Loved the combat and the humor. I'm not sure if it's the same thing, but I had a similar controller disconnect issue with my ant weight (also using an ESP32 and bluetooth controller).  The issue turned out to be the boot button on the microcontroller.  Sometimes big hits would cause the button to trigger, the board to reboot, and the controller to disconnect until I went through the pairing process again.  Other times it would still think the controller was connected, but wouldn't accept input until I fully shut down and re-paired the controller.  As a short term fix, a big glob of hot glue on the button worked great! Reply from me: THAT MAKES SO MUCH SENSE! What you're describing is basically what happened. I didn't show it, but in that final grudge where the drum split, the same thing happened where it died and couldn't accept input. We opened the box, power cycled, and just as you described, it came back to life."}

Is that what happened? I don't know, as by the time they left that comment, I had already moved onto an improved setup. I was in the process of building my first [beetleweight](../beetleweight/index.qmd) for [NHRL](nhrl.io). I wanted to move away from the direct to ESP32 setup, not only because of the aforementioned problems being amplified with bigger and tougher robots, but also I've heard stories of people having signal issues with bluetooth control schemes at NHRL due to there being tons of Wifi traffic.

## The better approach - ELRS

What I wanted was a box with some serial interface that the ESP32 could talk to on one side and an antenna on the other side. The idea was that I'd have a "bridge" of sorts that would talk to the Wii Remote over Bluetooth and talk to the robot over a more standard RC link. That way, the thing that transmits from outside the box to inside the box was an off-the-shelf system that received extensive failsafe and interference testing, and it would allow me to use a lighter and more robust off-the-shelf reciever.

![](unnamed.jpg)

I settled with [ELRS](https://www.expresslrs.org/), a high-performance open source RC link, in particular one of [these Backpack modules](https://betafpv.com/products/elrs-micro-tx-module). They are meant to retrofit a non-ELRS transmitter to be compatible, but it turns out the interface is just a 400k baud UART connection. This also came with the added benefit of allowing me to use [the smallest 3ch PWM receiver on the market](https://betafpv.com/collections/expresslrs-series/products/elrs-lite-receiver) that I know of. The bridge initially consisted of...

* Wii Remote talks to ESP32 over Bluetooth
* ESP32 talks to Arduino Uno over I2C
* Arduino Uno talks to ELRS TX module over UART
* ELRS TX module talks to robot 
* Robot KOs other robot (ideally)

![](20240823_002548.jpg)

I powered the three parts of the bridge off of a cell phone power bank because that's the most convenient and readily available solution. I eventually made a really cool stand to make the whole bridge resemble a Wii console becuase why not?

The Arduino Uno was there between the ESP32 and ELRS TX module because the code I used to talk to the TX module was based on [this Arduino Uno based ELRS transmitter I found on GitHub](https://github.com/kkbin505/Arduino-Transmitter-for-ELRS), and I wasn't sure if 3.3V logic on the ESP32 could work with the TX module. Eventually I realized this was incorrect and ditched the ESP32, which makes for one less cable to deal with. Eventually I want to make a dedicated custom PCB that to make the whole setup look nice, but every time I work on combat robots, I find myself too occupied with the robot itself to give this any significant thought.